package br.org.venturus.sorat

import static org.springframework.http.HttpStatus.*;
import grails.transaction.Transactional;

@Transactional(readOnly = true)
class ProjectTestDomainController {

  static allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]
    
  def show(ProjectTestDomain projectTestDomain) {
    def projectInstance = Project.get(params.p);
    render (view: "show", model: [projectTestDomain: projectTestDomain, projectInstance: projectInstance]);
  }

  def create(Project projectInstance) {
    def projectTestDomain = new ProjectTestDomain(params);
    if(params.isTest){
      projectTestDomain.name = "AutoGeneratedTestCases.java";
      projectTestDomain.path = "src\\test\\java\\br\\org\\venturus\\qa\\test\\#PACKAGE_NAME";
      projectTestDomain.isTest = true;
    }else{
      projectTestDomain.name = "#DOMAIN_CLASS.java";
      projectTestDomain.path = "src\\main\\java\\br\\org\\venturus\\qa\\auto\\domain";
    }
    render (view: "create", model: [projectTestDomain: projectTestDomain, projectInstance: projectInstance]);
  }
  
  @Transactional
  def save(ProjectTestDomain projectTestDomain) {
    def projectInstance = Project.get(params.project);
    if (projectTestDomain == null || projectInstance == null) {
      transactionStatus.setRollbackOnly()
      notFound()
      return
    }
    if (projectTestDomain.hasErrors()) {
      transactionStatus.setRollbackOnly()
      render (view: "create", model: [projectTestDomain: projectTestDomain, projectInstance: projectInstance]);
      return
    }
                
    projectTestDomain.save flush:true;
    if(projectTestDomain.isTest){
      projectInstance.domainTestClass = projectTestDomain;
    }else{
      projectInstance.domainClass = projectTestDomain;
    }
    projectInstance.save flush:true;
    
    request.withFormat {
      form multipartForm {
        flash.message = "Domain Test File created successfully.";
        redirect action: "show", id: projectTestDomain.id, params: [p: projectInstance.id]
      }
      '*' { respond projectTestDomain, [status: CREATED] }
    }
  }

  def edit(ProjectTestDomain projectTestDomain) {
    def projectInstance = Project.get(params.p);
    render (view: "edit", model: [projectTestDomain: projectTestDomain, projectInstance: projectInstance]);
  }

  @Transactional
  def update(ProjectTestDomain projectTestDomain) {
    def projectInstance = Project.get(params.project);
    if (projectTestDomain == null || projectInstance == null) {
      transactionStatus.setRollbackOnly()
      notFound()
      return
    }
        
    if (projectTestDomain.hasErrors()) {
      transactionStatus.setRollbackOnly()
      render (view: "edit", model: [projectTestDomain: projectTestDomain, projectInstance: projectInstance]);
      return
    }
        
    projectTestDomain.save flush:true
    request.withFormat {
      form multipartForm {
        flash.message = "Domain Test File updated successfully.";
        redirect action: "show", id: projectTestDomain.id, params: [p: projectInstance.id]
      }
      '*'{ respond projectTestDomain, [status: OK] }
    }
  }
  
  @Transactional
  def delete(ProjectTestDomain projectTestDomain) {
    def projectInstance = Project.get(params.project);
    if (projectTestDomain == null || projectInstance == null) {
      transactionStatus.setRollbackOnly()
      notFound()
      return
    }
                
    projectTestDomain.delete flush:true
    request.withFormat {
      form multipartForm {
        flash.message = "Domain Test File deleted successfully.";
        redirect(controller: "project", action: "show", id: projectInstance.id);
      }
      '*'{ render status: NO_CONTENT }
    }
  }

  protected void notFound() {
    request.withFormat {
      form multipartForm {
        flash.message = "Domain Test File not found.";
        redirect controller: "project", action: "index", method: "GET"
      }
      '*'{ render status: NOT_FOUND }
    }
  }
  
}   